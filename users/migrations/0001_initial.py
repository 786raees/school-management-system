# Generated by Django 4.1.3 on 2022-11-26 18:44

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("academics", "0002_initial"),
        ("configurations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AllUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "registration_no",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="registration no"
                    ),
                ),
                (
                    "roll_no",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="roll no"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=150, null=True, verbose_name="first name"
                    ),
                ),
                (
                    "religion",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="religion"
                    ),
                ),
                (
                    "caste",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="caste"
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("student", "student"),
                            ("parent", "parent"),
                            ("teacher", "teacher"),
                            ("admin", "admin"),
                            ("super admin", "super admin"),
                        ],
                        default="super admin",
                        max_length=11,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "male"), ("female", "female")],
                        default="male",
                        max_length=6,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        default=django.utils.timezone.now,
                        null=True,
                        verbose_name="Date Of Birth",
                    ),
                ),
                (
                    "father_name",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="father name",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="phone"
                    ),
                ),
                (
                    "emergency_contact_number",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="Emergency Contact",
                    ),
                ),
                (
                    "mother_name",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="mother name",
                    ),
                ),
                (
                    "date_of_joining",
                    models.DateField(
                        blank=True,
                        default=django.utils.timezone.now,
                        null=True,
                        verbose_name="Date Of Joining",
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        choices=[
                            ("Single", "Single"),
                            ("Married", "Married"),
                            ("Widowed", "Widowed"),
                            ("Separated", "Separated"),
                            ("Not Specified", "Not Specified"),
                        ],
                        default="Not Specified",
                        max_length=13,
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        default="user_default_pic.jpg",
                        upload_to="user_photo",
                        verbose_name="user dp",
                    ),
                ),
                (
                    "current_address",
                    models.TextField(
                        blank=True, null=True, verbose_name="current address"
                    ),
                ),
                (
                    "permanent_address",
                    models.TextField(
                        blank=True, null=True, verbose_name="permanent address"
                    ),
                ),
                (
                    "qualification",
                    models.TextField(
                        blank=True, null=True, verbose_name="qualification"
                    ),
                ),
                (
                    "work_experience",
                    models.TextField(
                        blank=True, null=True, verbose_name="work experience"
                    ),
                ),
                ("note", models.TextField(blank=True, null=True, verbose_name="note")),
                (
                    "epf_no",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="EPF No"
                    ),
                ),
                (
                    "contract_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Permanent", "Permanent"),
                            ("Probation", "Probation"),
                        ],
                        max_length=9,
                        null=True,
                    ),
                ),
                (
                    "basic_salary",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Basic Salary"
                    ),
                ),
                (
                    "work_shift",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Work Shift"
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Location"
                    ),
                ),
                (
                    "date_of_leaving",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Date Of Leaving",
                    ),
                ),
                (
                    "account_title",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Account Title",
                    ),
                ),
                (
                    "bank_account_number",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Bank Account Number",
                    ),
                ),
                (
                    "bank_name",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Bank Name"
                    ),
                ),
                (
                    "ifsc_code",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="IFSC Code"
                    ),
                ),
                (
                    "bank_branch_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Bank Branch Name",
                    ),
                ),
                (
                    "facebook_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Facebook URL",
                    ),
                ),
                (
                    "twitter_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Twitter URL",
                    ),
                ),
                (
                    "linkedin_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Linkedin URL",
                    ),
                ),
                (
                    "instagram_url",
                    models.URLField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Instagram URL",
                    ),
                ),
                (
                    "resume",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=users.models.get_upload_to,
                        verbose_name="Resume",
                    ),
                ),
                (
                    "joining_letter",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=users.models.get_upload_to,
                        verbose_name="Joining Letter",
                    ),
                ),
                (
                    "resignation_letter",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=users.models.get_upload_to,
                        verbose_name="Resignation Letter",
                    ),
                ),
                (
                    "other_documents",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=users.models.get_upload_to,
                        verbose_name="Other Documents",
                    ),
                ),
                (
                    "barcode",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=users.models.get_barcode_upload_to,
                        verbose_name="barcode",
                    ),
                ),
                (
                    "class_name",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="academics.classes",
                        verbose_name="class name",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="academics.department",
                        verbose_name="department",
                    ),
                ),
                (
                    "designation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="academics.designation",
                        verbose_name="designation",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="configurations.schoolinfo",
                        verbose_name="school name",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="academics.section",
                        verbose_name="section",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "All User",
                "verbose_name_plural": "All Users",
                "unique_together": {
                    ("school", "registration_no"),
                    ("section", "roll_no", "school"),
                },
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Admin",
            fields=[],
            options={
                "verbose_name": "Admin",
                "verbose_name_plural": "Admins",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.alluser",),
            managers=[
                ("objects", users.models.AdminManager()),
            ],
        ),
        migrations.CreateModel(
            name="Parent",
            fields=[],
            options={
                "verbose_name": "Parent",
                "verbose_name_plural": "Parents",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.alluser",),
            managers=[
                ("objects", users.models.ParentManager()),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[],
            options={
                "verbose_name": "student",
                "verbose_name_plural": "students",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.alluser",),
            managers=[
                ("objects", users.models.StudentManager()),
            ],
        ),
        migrations.CreateModel(
            name="SuperAdmin",
            fields=[],
            options={
                "verbose_name": "Super Admin",
                "verbose_name_plural": "Super Admins",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.alluser",),
            managers=[
                ("objects", users.models.SuperAdminManager()),
            ],
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[],
            options={
                "verbose_name": "Teacher",
                "verbose_name_plural": "Teachers",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.alluser",),
            managers=[
                ("objects", users.models.TeacherManager()),
            ],
        ),
    ]
